pipeline {
  options {
    disableConcurrentBuilds()
  }
  agent {
    dockerfile {
      dir 'deploy/cloud-foundry'
      args '-u root:root'
    }
  }
  environment {
    ELK_REGISTRATION_COMMAND="${env.ELK_SERVICE_REGISTRATION_COMMAND}"
  }
  stages {
    stage('Build') {
      environment {
        CHROMEDRIVER_SKIP_DOWNLOAD='true'
        GECKODRIVER_SKIP_DOWNLOAD='true'
        PUPPETEER_SKIP_CHROMIUM_DOWNLOAD='true'
      }
      steps {
        sh 'rm -rf node_modules'
        sh 'npm install'
        sh 'npm run build'
        sh 'ls -al'
      }
    }

    stage('Deploy to CF') {
      environment {
        CF_HOME='/root' // Revert override from Jenkins global env
        CF_API="${env.CF_API_V3}"
        CF_LOGIN=credentials('portaljs.cloudfoundry.login')
        CF_LOG_DRAINER_SERVICE="${env.CF_LOG_DRAINER_SERVICE_NAME}"
        CF_ORG="${env.CF_ORG}"
        CF_SPACE="${env.BRANCH_NAME ==~ /\Av\d+\.\d+\.\d+\z/ ? 'production' : (env.BRANCH_NAME == 'master' ? 'test' : 'dev')}"
        CF_APP_NAME="portaljs${env.CF_SPACE == 'production' ? '' : '-' + env.CF_SPACE}"
        CF_USERNAME="${env.CF_LOGIN_USR}"
        CF_PASSWORD="${env.CF_LOGIN_PSW}"
      }
      steps {
        configFileProvider([
          configFile(fileId: "portaljs.${env.CF_SPACE}.vars.yml", targetLocation: 'deploy/cloud-foundry/vars.yml'),
          configFile(fileId: "portaljs.${env.CF_SPACE}.routes", targetLocation: 'deploy/cloud-foundry/routes')
        ]) {
          sh 'export CF_ROUTES=$(cat deploy/cloud-foundry/routes)'
          sh 'ls -al'
          sh 'env'
          // sh '/docker-entrypoint deploy -f deploy/cloud-foundry/manifest.yml --vars-file deploy/cloud-foundry/vars.yml'
        }
      }
    }
    // stage('Attach autoscaling policy on CF') {
    //   steps {
    //     configFileProvider([
    //       configFile(fileId: "portaljs.${env.CF_SPACE}.autoscaling-policy.json", targetLocation: './deploy/cloud-foundry/autoscaling-policy.json'),
    //     ]) {
    //       sh 'cf attach-autoscaling-policy ${CF_APP_NAME} ./deploy/cloud-foundry/autoscaling-policy.json'
    //     }
    //   }
    // }
    // stage('Register with ELK') {
    //   when {
    //     not {
    //       environment name: 'ELK_REGISTRATION_COMMAND', value: 'null'
    //     }
    //   }
    //   environment {
    //     CF_APP_GUID="${sh(script:'cf app ${CF_APP_NAME} --guid | head -1', returnStdout: true).trim()}"
    //   }
    //   steps {
    //     sh '${ELK_REGISTRATION_COMMAND} ${CF_APP_NAME} ${CF_APP_GUID}'
    //     sh 'if [ $? -eq 0 ]; then echo "Log drainer registration OK"; else echo "ELK registration failed!"; exit 1; fi'
    //   }
    // }
    // stage('Deploy Storybook') {
    //   when {
    //     environment name: 'CF_SPACE', value: 'test'
    //   }
    //   steps {
    //     sh 'npm run build-storybook'
    //     sh 'cd storybook-static && cf push portaljs-storybook -f ../deploy/cloud-foundry/storybook.manifest.yml'
    //   }
    // }
  }
}
